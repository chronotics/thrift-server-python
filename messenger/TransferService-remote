#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from messenger import TransferService
from messenger.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void writeMessageBegin(Message _v)')
    print('  void writeMessage(Message _v)')
    print('  void writeMessageEnd(Message _v)')
    print('  void writeBool(bool _v)')
    print('  void writeI16(i16 _v)')
    print('  void writeI32(i32 _v)')
    print('  void writeI64(i64 _v)')
    print('  void writeDouble(double _v)')
    print('  void writeString(string _v)')
    print('  Message readMessageBegin(string _receiver_id)')
    print('  Message readMessage(string _receiver_id)')
    print('  bool readMessageEnd(string _receiver_id)')
    print('  bool readBool()')
    print('  i16 readI16()')
    print('  i32 readI32()')
    print('  i64 readI64()')
    print('  double readDouble()')
    print('  string readString()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TransferService.Client(protocol)
transport.open()

if cmd == 'writeMessageBegin':
    if len(args) != 1:
        print('writeMessageBegin requires 1 args')
        sys.exit(1)
    pp.pprint(client.writeMessageBegin(eval(args[0]),))

elif cmd == 'writeMessage':
    if len(args) != 1:
        print('writeMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.writeMessage(eval(args[0]),))

elif cmd == 'writeMessageEnd':
    if len(args) != 1:
        print('writeMessageEnd requires 1 args')
        sys.exit(1)
    pp.pprint(client.writeMessageEnd(eval(args[0]),))

elif cmd == 'writeBool':
    if len(args) != 1:
        print('writeBool requires 1 args')
        sys.exit(1)
    pp.pprint(client.writeBool(eval(args[0]),))

elif cmd == 'writeI16':
    if len(args) != 1:
        print('writeI16 requires 1 args')
        sys.exit(1)
    pp.pprint(client.writeI16(eval(args[0]),))

elif cmd == 'writeI32':
    if len(args) != 1:
        print('writeI32 requires 1 args')
        sys.exit(1)
    pp.pprint(client.writeI32(eval(args[0]),))

elif cmd == 'writeI64':
    if len(args) != 1:
        print('writeI64 requires 1 args')
        sys.exit(1)
    pp.pprint(client.writeI64(eval(args[0]),))

elif cmd == 'writeDouble':
    if len(args) != 1:
        print('writeDouble requires 1 args')
        sys.exit(1)
    pp.pprint(client.writeDouble(eval(args[0]),))

elif cmd == 'writeString':
    if len(args) != 1:
        print('writeString requires 1 args')
        sys.exit(1)
    pp.pprint(client.writeString(args[0],))

elif cmd == 'readMessageBegin':
    if len(args) != 1:
        print('readMessageBegin requires 1 args')
        sys.exit(1)
    pp.pprint(client.readMessageBegin(args[0],))

elif cmd == 'readMessage':
    if len(args) != 1:
        print('readMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.readMessage(args[0],))

elif cmd == 'readMessageEnd':
    if len(args) != 1:
        print('readMessageEnd requires 1 args')
        sys.exit(1)
    pp.pprint(client.readMessageEnd(args[0],))

elif cmd == 'readBool':
    if len(args) != 0:
        print('readBool requires 0 args')
        sys.exit(1)
    pp.pprint(client.readBool())

elif cmd == 'readI16':
    if len(args) != 0:
        print('readI16 requires 0 args')
        sys.exit(1)
    pp.pprint(client.readI16())

elif cmd == 'readI32':
    if len(args) != 0:
        print('readI32 requires 0 args')
        sys.exit(1)
    pp.pprint(client.readI32())

elif cmd == 'readI64':
    if len(args) != 0:
        print('readI64 requires 0 args')
        sys.exit(1)
    pp.pprint(client.readI64())

elif cmd == 'readDouble':
    if len(args) != 0:
        print('readDouble requires 0 args')
        sys.exit(1)
    pp.pprint(client.readDouble())

elif cmd == 'readString':
    if len(args) != 0:
        print('readString requires 0 args')
        sys.exit(1)
    pp.pprint(client.readString())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
